#!/usr/bin/env bash

# Fork of gruber's tot.sh https://gist.github.com/gruber/b18d8b53385fa612713754799ed4d0a2
# which is a fork of chockenberry's tot.sh https://gist.github.com/chockenberry/d33ef5b6e6da4a3e4aa9b07b093d3c23

# Exit immediately if a pipeline returns a non-zero status.
set -e
# If set, the return value of a pipeline is the value of the last (rightmost) command
# to exit with a non-zero status, or zero if all commands in the pipeline exit successfully.
set -o pipefail    

basename=$(basename "$0")

#
# Helpers
#
# All functions expect that the global `dot` variable is set & validated.
#

function print_usage() {
    cat << USAGE
Usage: ${basename} <dot> [ <command> ] [ <file> | - ]

<dot>:

  0|e|empty               1st EMPTY dot (can contain whitespaces)
  1|y|yellow              1st dot
  2|o|orange              2nd dot
  3|r|red                 3rd dot
  4|p|purple              4th dot
  5|b|blue                5th dot
  6|t|turquoise|c|cyan    6th dot
  7|g|green               7th dot

<command>:

  activate        select dot & activate Tot.app (default command if not provided)
  p|print         print dot contents
  a|append        append file/stdin contents to dot
  c|clear         remove dot contents
  r|replace       replace dot contents with file/stdin

<file>:

  path to a regular file (anything accepted by the cat command)
  use - for stdin (default if not provided)

Examples:

  $ ${basename} 2                        # activate Tot.app and select second dot
  $ ${basename} orange print             # print second dot contents to stdout
  $ ${basename} 2 clear                  # clear contents of second dot
  $ cal -h | ${basename} 1 append -      # append a calendar to first dot
  $ cal -h | ${basename} 1 append        # append a calendar to first dot (fallback to stdin)
  $ ${basename} 2 append MyApp.crash     # append a crash report to second dot
  $ ${basename} 2 replace MyApp.crash    # replace second dot contents with a crash report
  $ ${basename} 2 a << END               # append two lines to second dot (fallback to stdin)
  heredoc> 1st line
  heredoc> 2nd line
  heredoc> END
USAGE
}

function get_url_encoded_content_of() {
    local file=$1

    # $(< "${file}" python3 ...) doesn't handle stdin (-) well, but cat does
    # shellcheck disable=SC2002
    cat "${file}" | python3 -c 'import urllib.parse; import sys; print(urllib.parse.quote(sys.stdin.read()))'
}

function tell_tot_to() {
    local command=$1

    osascript -e "tell application \"Tot\" to ${command}"
}

function tell_tot_to_append_content_of() {    
    local file=$1
    local content

    content=$(get_url_encoded_content_of "${file}")
    tell_tot_to "open location \"tot://${dot}/append?text=${content}\""
}

function tell_tot_to_replace_content_with() {
    local file=$1
    local content

    content=$(get_url_encoded_content_of "${file}")
    tell_tot_to "open location \"tot://${dot}/replace?text=${content}\""
}

function replace_zero_dot_with_first_empty_dot() {
    local testdot
    local content

    if ! [[ ${dot} = "0" ]]; then
        return 0
    fi

    for testdot in {1..7}
    do
        content=$(tell_tot_to "open location \"tot://${testdot}/content\"")

        # Matching whitespace-only strings in Bash: https://stackoverflow.com/questions/9767644/
        if ! [[ $content =~ [^[:space:]] ]]; then
            # clear contents of dot, in case there's whitespace:
            tell_tot_to "open location \"tot://${testdot}/replace?text=\""

            dot=$testdot
            break
        fi
    done

    if (( dot == 0 )); then
        >&2 echo "error: no empty dots"
        return 1
    fi
}

# Martin Walk's idea https://gist.github.com/MW3000/73489fc57359ac3b72e19f102efaab56#file-tot-sh-L84-L103

function replace_dot_name_with_number() {
    case "${dot}" in
        e|empty)
            dot=0
            ;;

        y|yellow)        
            dot=1
            ;;

        o|orange)
            dot=2
            ;;

        r|red)
            dot=3
            ;;

        p|purple)
            dot=4
            ;;

        b|blue)
            dot=5
            ;;

        t|turquoise|c|cyan)
            dot=6
            ;;

        g|green)
            dot=7
            ;;
  esac
}

#
# Main
#

if [ -z "$*" ]; then
    print_usage
    exit 1
fi

#
# Sort of input validation
#

# Valid dot range is 1-7 (inclusive). User can provide 0 which means
# first empty dot (can contain just whitespaces).
dot="$1"
replace_dot_name_with_number
replace_zero_dot_with_first_empty_dot
if ! [[ $dot =~ ^[1-7]$ ]]; then
    >&2 echo "error: invalid dot number ${dot}"
    exit 1
fi

# Default to activate command
command="${2:-activate}"

# Default to stdin if no input is provided
input="${3:--}"

#
# Commands
#

case "${command}" in
    activate)
        # Switch dot & activate Tot
        tell_tot_to "open location \"tot://${dot}\""
        tell_tot_to "activate"
        ;;

    p|print)
        # Print contents of dot
        tell_tot_to "open location \"tot://${dot}/content\""
        ;;

    c|clear)
        # Clear contents of dot
        tell_tot_to "open location \"tot://${dot}/replace?text=\""
        ;;

    r|replace)
        # Replace contents of dot
        tell_tot_to_replace_content_with "${input}"
        ;;

    a|append)
        # Append contents to dot
        tell_tot_to_append_content_of "${input}"
        ;;

    *)
        print_usage
        exit 1
esac
